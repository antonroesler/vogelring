services:
  postgres:
    image: postgres:15-alpine
    container_name: vogelring-postgres
    environment:
      POSTGRES_DB: vogelring
      POSTGRES_USER: vogelring
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # PostgreSQL configuration optimized for Raspberry Pi
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - /mnt/ssd/data/vogelring/postgres:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "192.168.0.201:5432:5432"  # Bind to Pi's IP address only
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vogelring -d vogelring"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Resource limits for Raspberry Pi
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    command: >
      postgres
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    networks:
      - vogelring-network

  api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: vogelring-api
    environment:
      DATABASE_URL: postgresql://vogelring:${DB_PASSWORD}@postgres:5432/vogelring
      PYTHONPATH: /app
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      # Ensure uv can write its cache (fixes permission errors)
      UV_CACHE_DIR: /tmp/uv-cache
      XDG_CACHE_HOME: /tmp
      # Prevent uv from modifying uv.lock at runtime
      UV_FROZEN: "1"
      # FastAPI configuration
      WORKERS: 1
      MAX_REQUESTS: 1000
      MAX_REQUESTS_JITTER: 100
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "127.0.0.1:8000:8000"  # Only bind to localhost
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Resource limits for Raspberry Pi
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    # Production volume mounts (no dev volumes)
    volumes:
      - /mnt/ssd/logs/vogelring:/app/logs
    networks:
      - vogelring-network

  nginx:
    image: nginx:alpine
    container_name: vogelring-nginx
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - /mnt/ssd/data/vogelring/nginx_cache:/var/cache/nginx
      - /mnt/ssd/logs/vogelring/nginx:/var/log/nginx
    ports:
      - "127.0.0.1:80:80"  # Only bind to localhost
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # Resource limits for Raspberry Pi
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'
    networks:
      - vogelring-network

networks:
  vogelring-network:
    name: vogelring-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16