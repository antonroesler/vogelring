name: Release Please

on:
  push:
    branches:
      - master
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
    branches:
      - master

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json
          token: ${{ secrets.GITHUB_TOKEN }}

      # Custom step to sync version to backend/pyproject.toml when release PR is created
      - name: Sync version to backend pyproject.toml
        if: ${{ steps.release.outputs.pr }}
        run: |
          # Parse PR JSON and extract number and title
          PR_JSON='${{ steps.release.outputs.pr }}'
          PR_NUMBER=$(echo "$PR_JSON" | jq -r '.number')
          PR_TITLE=$(echo "$PR_JSON" | jq -r '.title')

          echo "Release PR created: #$PR_NUMBER"
          echo "PR Title: $PR_TITLE"

          # Extract version from title using regex
          VERSION=$(echo "$PR_TITLE" | sed -n 's/.*release \([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
          echo "Extracted version: $VERSION"

          if [ -z "$VERSION" ]; then
            echo "‚ùå Could not extract version from PR title: $PR_TITLE"
            exit 1
          fi

          # Get the release branch name from the PR JSON
          BRANCH_NAME=$(echo "$PR_JSON" | jq -r '.headBranchName')
          echo "Release branch: $BRANCH_NAME"

          # Switch to the release branch
          git fetch origin "$BRANCH_NAME"
          git checkout "$BRANCH_NAME"

          # Update version in backend/pyproject.toml
          echo "üìù Updating backend/pyproject.toml with version $VERSION"
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" backend/pyproject.toml

          # Check if the file was actually changed
          if git diff --quiet backend/pyproject.toml; then
            echo "‚ÑπÔ∏è No changes needed in backend/pyproject.toml"
          else
            echo "‚úÖ Updated backend/pyproject.toml"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add backend/pyproject.toml
            git commit -m "chore: sync version $VERSION to backend/pyproject.toml"
            git push origin "$BRANCH_NAME"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
